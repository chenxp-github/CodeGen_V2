[CodeSwitch copy_comp_print=false]
class SimpleLinkService{
	TaskMgr *task_mgr;
	[noget,noset] int task_link_rpc;
	[noget,noset] Closure callback;
}

[CodeSwitch copy_comp_print=false]

class SocketReaderWriter{
	TaskMgr *i_task_mgr;
	Socket *i_socket;
	FileBase *i_read_dest_file;
	FileBase *i_write_src_file;
	fsize_t total_read_length;
	fsize_t write_end_offset;
	fsize_t write_offset;
	fsize_t read_length;
	fsize_t read_size_this_time;
	fsize_t write_size_this_time;
	uint32_t write_timer;
	uint32_t read_timer;
	uint32_t timeout;
	Closure callback;
}



class TaskTcpConnector:Task{    
    int step;
    TcpClient tcp_client;	
    string server_name;
    int port;	
    int timeout;	
    int connect_time;	
    int_ptr_t *hostoip_context;		
    Closure callback;
}

class TaskTcpAcceptor{
}

class Thread{
    [noget,noset] THREAD_HANDLE *handle;
    int running;
}
	
class Socket{
	int socket_num;
}

class TcpServer:Socket{
}

class TcpClient:Socket{
}

[Stack of Closure]
class ClosureList{
}

[CodeSwitch copy_comp_print=false]
class TaskRunner{
	[noget,noset] ClosureList ClosureList;
	[noget,noset] Mutex mutex;
}

class FileBase{
	[noget,noset] void *user_data;
	char *split_chars;
}

class Mem:FileBase{
	[noset] int_ptr_t offset;
	int_ptr_t size;
	[noget,noset] int_ptr_t max_size;
	[noget,noset]bool_t  is_const;
	[noget,noset]bool_t is_self_alloc;
}

class MemFile:FileBase{
    [noget,noset] int_ptr_t size;
    [noget,noset] int_ptr_t pages;
    [noget,noset] int_ptr_t offset;
    [noget,noset] int_ptr_t max_pages;  
    [noget,noset] char *base;
    [noget,noset] int_ptr_t page_size;
    [noget,noset] uint32_t mod_n,shift_n;
}


class File:public FileBase{
    [noget,noset] int* fp;
    [noget,noset] char *file_buf;
    [noget,noset] int_ptr_t buf_size,init_buf_size;
    [noget,noset] fsize_t offset,size,buf_start;
}

class CombFile:public FileBase{
    [noget,noset] fsize_t Offset;
    [noget,noset] FileBase *AllFiles;
    [noget,noset] int FileNum;
    [noget,noset] int MaxFileNum;
}

class PartFile:public FileBase{
     [noget,noset] FileBase *i_host_file;
     [noget,noset] fsize_t offset,size;
     [noget,noset] fsize_t host_off;
     [noget,noset] fsize_t max_size;
}

class FileManager{
}

class WeakPtr{
	[noget,noset] void *raw_ptr;
	[noget,noset] int weak_ref_id;
}

class TaskTimer:Task{
    uint32_t timeout;
    bool one_shot;
    [noget,noset] int step;
    [noset] Closure callback;
}



